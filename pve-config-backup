#!/usr/bin/env bash
#
#    Copyright (c) 2025 Open-E, Inc.
#    All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
#
# pve-config-backup: Backup Proxmox VE .conf files (QEMU VMs & LXC CTs)
# using inotify to watch for changes.
#
# Key points in this version:
#   - A single helper function, get_conf_files_for_id(), finds all .conf files
#     referencing "vm-<ID>-disk" in /etc/pve/nodes/*/(qemu-server|lxc).
#   - The NFS backup section enumerates /mnt/pve/*/images/<ID> folders and calls the helper.
#   - The script waits (up to 60 tries) at boot for /etc/pve/nodes/*/(qemu-server|lxc)
#     directories to become available.
#   - An initial backup is performed on service start before entering the inotify loop.
#   - inotify now blocks until an event is detected (no timeout logic).

set -euo pipefail

VERSION="1.01"
RELEASE_DATE="2025-07-19"
SCRIPT_NAME="pve-config-backup"
SERVICE_NAME="pve-config-backup.service"
SERVICE_PATH="/etc/systemd/system/${SERVICE_NAME}"
LOG_FILE="/var/log/${SCRIPT_NAME}.log"
CONFIG_FILE="/etc/default/${SCRIPT_NAME}"

# Default configuration
RSYNC_OPTS="-a --no-o --no-g --no-p --delete"
BACKUP_DIRS=("/mnt/pve/*/images/*")
MAX_RETRIES=60
RETRY_WAIT=5

# Load configuration if exists
if [[ -f "${CONFIG_FILE}" ]]; then
    # shellcheck disable=SC1090
    source "${CONFIG_FILE}"
fi

# Logging function
log() {
    local level="$1"
    local message="$2"
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "${timestamp} [${level}] ${message}" | tee -a "${LOG_FILE}"
}

usage() {
  cat <<EOF
Usage: ${SCRIPT_NAME} [command]

Commands:
  help, -h        Show this help message and exit
  install         Install, enable, and start the systemd service
  uninstall       Remove the systemd service
  status          Show the service status
  start           Start the systemd service
  stop            Stop the systemd service
  daemon          Run the backup daemon in the foreground (used by systemd)
  info            Show recent backup info
  config          Create default configuration file
  version         Show version information
  update          Check for and install script updates from GitHub

If no command is provided, the script will display backup info.
EOF
}

SERVICE_UNIT_CONTENT="[Unit]
Description=Proxmox VE Configuration Backup Service (inotify-based)
After=network-online.target
Wants=network-online.target
Documentation=https://github.com/open-e/pve-config-backup

[Service]
Type=simple
EnvironmentFile=-${CONFIG_FILE}
ExecStart=/usr/local/sbin/${SCRIPT_NAME} daemon
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
"

create_default_config() {
    if [[ ! -f "${CONFIG_FILE}" ]]; then
        cat > "${CONFIG_FILE}" <<EOF
# Configuration for ${SCRIPT_NAME}
# Uncomment and modify as needed

# RSYNC_OPTS="-a --no-o --no-g --no-p --delete --quiet"
# BACKUP_DIRS=("/mnt/pve/*/images/*")
# MAX_RETRIES=60
# RETRY_WAIT=5
EOF
        log "INFO" "Default configuration created at ${CONFIG_FILE}"
    else
        log "INFO" "Configuration file already exists at ${CONFIG_FILE}"
    fi
}

install_service() {
  if [[ ! -f "/usr/local/sbin/${SCRIPT_NAME}" ]]; then
    cp "$0" "/usr/local/sbin/${SCRIPT_NAME}"
    chmod +x "/usr/local/sbin/${SCRIPT_NAME}"
    log "INFO" "Copied script to /usr/local/sbin/${SCRIPT_NAME}"
  fi
  
  echo "${SERVICE_UNIT_CONTENT}" > "${SERVICE_PATH}"
  create_default_config
  systemctl daemon-reload
  systemctl enable "${SERVICE_NAME}"
  systemctl start "${SERVICE_NAME}"
  log "INFO" "Installation complete and service started."
}

uninstall_service() {
  systemctl stop "${SERVICE_NAME}" || true
  systemctl disable "${SERVICE_NAME}" || true
  rm -f "${SERVICE_PATH}"
  log "INFO" "Service stopped and disabled"
  if [[ -f "/usr/local/sbin/${SCRIPT_NAME}" ]]; then
    rm -f "/usr/local/sbin/${SCRIPT_NAME}"
    log "INFO" "Removed script from /usr/local/sbin/${SCRIPT_NAME}"
  fi
  systemctl daemon-reload
  log "INFO" "Uninstall complete."
}

start_service() {
  systemctl start "${SERVICE_NAME}"
  log "INFO" "Systemd service started."
}

stop_service() {
  systemctl stop "${SERVICE_NAME}"
  log "INFO" "Systemd service stopped."
}

status_service() {
  systemctl status "${SERVICE_NAME}"
}

check_dependencies() {
  # Map each command to its corresponding package name.
  local -A package_map=(
    ["inotifywait"]="inotify-tools"
    ["rsync"]="rsync"
    ["mount"]="util-linux"
    ["umount"]="util-linux"
  )

  # Use an associative array to avoid duplicate package names.
  declare -A missing_packages=()
  for cmd in "${!package_map[@]}"; do
    if ! command -v "$cmd" >/dev/null; then
      missing_packages["${package_map[$cmd]}"]=1
    fi
  done

  if (( ${#missing_packages[@]} > 0 )); then
    local packages=("${!missing_packages[@]}")
    log "INFO" "Installing missing packages: ${packages[*]}"
    apt-get update && apt-get install -y "${packages[@]}" || {
      log "ERROR" "Failed to install required packages. Please install them manually."
      exit 1
    }
  fi
}

# Helper: find all .conf files referencing disks for a given ID
# Supports both VM and LXC disk configurations with proper device pattern matching
get_conf_files_for_id() {
  local id="$1"
  log "DEBUG" "get_conf_files_for_id: Searching for config files referencing ID $id"

  # Define device type patterns
  local BUS_DEVS="(?:scsi|ide|sata|virtio|efidisk|tpmstate|nvme)"    # needs digits
  local LXC_DEVS="(?:rootfs|mp[0-9]+)"                               # already valid
  local DEVICE_PATTERN="(?:${LXC_DEVS}|${BUS_DEVS}[0-9]+)"           # combine the two

  # Pattern to match disk references in config files
  local DISK_PATTERN="^${DEVICE_PATTERN}:[[:space:]]*[^:]+:[0-9]+/vm-${id}-disk-[0-9]+(?:\\.(?:raw|qcow2|vmdk))?"
  log "DEBUG" "get_conf_files_for_id: Using pattern: ${DISK_PATTERN}"

  # Search for config files
  local search_paths=("/etc/pve/nodes/*/qemu-server/*.conf" "/etc/pve/nodes/*/lxc/*.conf")
  log "DEBUG" "get_conf_files_for_id: Searching in paths: ${search_paths[*]}"
  
  local found_files
  found_files=$(grep -lP "${DISK_PATTERN}" \
    /etc/pve/nodes/*/qemu-server/*.conf \
    /etc/pve/nodes/*/lxc/*.conf \
    2>/dev/null || true)
  
  if [[ -n "$found_files" ]]; then
    log "DEBUG" "get_conf_files_for_id: Found config files for ID $id:"
    while IFS= read -r file; do
      log "DEBUG" "  - $file"
    done <<< "$found_files"
  else
    log "DEBUG" "get_conf_files_for_id: No config files found for ID $id"
  fi
  
  echo "$found_files"
}

###############################################################################
# Orphan Config Cleanup
###############################################################################
remove_orphan_conf_files() {
  log "INFO" "ORPHAN: Starting orphan configuration cleanup"
  local cleanup_count=0
  
  for backup_dir in "${BACKUP_DIRS[@]}"; do
    for path in $backup_dir; do
      if [[ ! -d "$path" ]]; then
        continue
      fi
      
      find "$path" \
        -type d -name ".nfs" -prune -o \
        -type f -name "*.conf" -print | while read -r conf; do
        if [[ -z "$conf" ]]; then
          continue
        fi
        
        local dir=$(dirname "$conf")
        local folder=$(basename "$dir")
        local vmid=$(basename "$conf" .conf)
        
        # Check for bad location
        if [[ "$folder" != "$vmid" ]]; then
          log "WARN" "ORPHAN: Bad location detected: $conf"
          log "INFO" "ORPHAN: Removing misplaced config file: $conf"
          if rm -f "$conf"; then
            log "INFO" "ORPHAN: Successfully removed misplaced file: $conf"
          else
            log "ERROR" "ORPHAN: Failed to remove misplaced file: $conf"
          fi
          continue
        fi
        
        # Check for missing disk file using nullglob
        shopt -s nullglob
        local matches=("$dir"/vm-"$vmid"-disk-*.qcow2 "$dir"/vm-"$vmid"-disk-*.raw "$dir"/vm-"$vmid"-disk-*.vmdk)
        shopt -u nullglob
        
        if [[ ${#matches[@]} -eq 0 ]]; then
          log "WARN" "ORPHAN: No disk files found for config: $conf"
          log "INFO" "ORPHAN: Removing orphaned config file: $conf"
          if rm -f "$conf"; then
            log "INFO" "ORPHAN: Successfully removed orphaned file: $conf"
          else
            log "ERROR" "ORPHAN: Failed to remove orphaned file: $conf"
          fi
        fi
      done
    done
  done
  
  log "INFO" "ORPHAN: Cleanup complete"
}

###############################################################################
# NFS Backup Logic
###############################################################################
backup_nfs_configs() {
  log "INFO" "NFS: Starting backup process"
  log "DEBUG" "NFS: BACKUP_DIRS configuration: ${BACKUP_DIRS[*]}"
  local processed_count=0
  local success_count=0
  local total_dirs_found=0
  
  for backup_dir in "${BACKUP_DIRS[@]}"; do
    log "DEBUG" "NFS: Expanding backup directory pattern: $backup_dir"
    
    # Count how many directories match this pattern
    local pattern_matches=0
    for path in $backup_dir; do
      if [[ -d "$path" ]]; then
        pattern_matches=$((pattern_matches + 1))
      fi
    done
    log "DEBUG" "NFS: Pattern '$backup_dir' matched $pattern_matches directories"
    
    for path in $backup_dir; do
      log "DEBUG" "NFS: Checking path: $path"
      if [[ ! -d "$path" ]]; then
        log "DEBUG" "NFS: Path does not exist or is not a directory: $path"
        continue
      fi
      
      total_dirs_found=$((total_dirs_found + 1))
      local id="${path##*/}"
      log "DEBUG" "NFS: Processing directory for ID: $id (path: $path)"
      processed_count=$((processed_count + 1))
      
      # Check if this ID directory actually contains VM disk files
      local disk_files
      disk_files=$(find "$path" -maxdepth 1 -name "vm-$id-disk-*" 2>/dev/null || true)
      if [[ -n "$disk_files" ]]; then
        log "DEBUG" "NFS: Found disk files for ID $id in $path:"
        while IFS= read -r disk_file; do
          log "DEBUG" "  - $disk_file"
        done <<< "$disk_files"
      else
        log "DEBUG" "NFS: No vm-$id-disk-* files found in $path"
      fi
      
      local conf_files_output
      conf_files_output=$(get_conf_files_for_id "$id")
      
      local conf_files=()
      if [[ -n "$conf_files_output" ]]; then
        while IFS= read -r line; do
          if [[ -n "$line" ]]; then
            conf_files+=("$line")
          fi
        done <<< "$conf_files_output"
      fi
      
      log "DEBUG" "NFS: get_conf_files_for_id returned ${#conf_files[@]} files for ID $id"
      
      if [[ ${#conf_files[@]} -eq 0 ]]; then
        log "WARN" "NFS: No .conf files referencing vm-$id-disk found. This might be a stale directory."
        log "DEBUG" "NFS: Checking if $path contains only non-VM files (leftover configs from deleted VMs)"
        local all_files
        all_files=$(find "$path" -maxdepth 1 -name "*.conf" 2>/dev/null || true)
        if [[ -n "$all_files" ]]; then
          log "DEBUG" "NFS: Found .conf files in $path that don't belong to active VMs:"
          while IFS= read -r orphan_file; do
            log "DEBUG" "  - $orphan_file (orphaned config)"
          done <<< "$all_files"
        fi
        continue
      fi
      
      for conf_file in "${conf_files[@]}"; do
        if [[ -z "$conf_file" ]]; then
          log "DEBUG" "NFS: Skipping empty conf_file entry"
          continue
        fi
        
        if [[ ! -f "$conf_file" ]]; then
          log "WARN" "NFS: Config file no longer exists: $conf_file"
          continue
        fi
        
        local conf_basename="${conf_file##*/}"
        log "INFO" "NFS: Copying conf $conf_file -> $path/$conf_basename"
        log "DEBUG" "NFS: rsync command: rsync $RSYNC_OPTS \"$conf_file\" \"$path/\""
        
        if rsync $RSYNC_OPTS "$conf_file" "$path/"; then
          success_count=$((success_count + 1))
          log "DEBUG" "NFS: Successfully copied $conf_file to $path"
        else
          log "ERROR" "Failed rsync NFS conf for ID $id from $conf_file to $path"
        fi
      done
    done
  done
  
  log "INFO" "NFS: Backup complete. Found $total_dirs_found total directories, processed $processed_count VMs/CTs, $success_count successful backups."
  log "DEBUG" "NFS: Backup process finished"
  
  # Run orphan cleanup after backup
  remove_orphan_conf_files
}

###############################################################################
# Full Backup Routine
###############################################################################
do_backup() {
  log "INFO" "Starting backup routine..."
  backup_nfs_configs
  log "INFO" "Backup routine completed"
}

###############################################################################
# Daemon with Inotify
###############################################################################
wait_for_pve_dirs() {
  log "INFO" "Waiting for PVE directories to become available..."
  local tries="${MAX_RETRIES:-60}"
  for ((i=1; i<=tries; i++)); do
    local watch_dirs=()
    for d in /etc/pve/nodes/*/qemu-server /etc/pve/nodes/*/lxc; do
      if [[ -d "$d" ]]; then
        watch_dirs+=("$d")
      fi
    done
    
    if [[ ${#watch_dirs[@]} -gt 0 ]]; then
      log "INFO" "PVE directories found after $i attempts"
      return 0
    fi
    
    log "INFO" "PVE directories not found. Retrying in ${RETRY_WAIT} seconds (attempt $i/$tries)..."
    sleep "${RETRY_WAIT:-5}"
  done
  
  log "WARN" "PVE directories not found after ${tries} attempts"
  return 1
}

build_watch_dirs() {
  local dirs=()
  for d in /etc/pve/nodes/*/qemu-server /etc/pve/nodes/*/lxc; do
    if [[ -d "$d" ]]; then
      dirs+=("$d")
    fi
  done
  echo "${dirs[@]}"
}

run_inotify_daemon() {
  trap 'log "INFO" "Caught stop signal, exiting..."; exit 0' SIGINT SIGTERM
  
  log "INFO" "Starting inotify daemon..."
  
  # Ensure log file exists and is writable
  touch "${LOG_FILE}" || {
    log "ERROR" "Cannot create log file at ${LOG_FILE}"
    exit 1
  }
  
  if ! wait_for_pve_dirs; then
    log "WARN" "/etc/pve/nodes/*/(qemu-server|lxc) not found after waiting. We'll still proceed."
  fi
  
  log "INFO" "Performing initial backup before entering inotify loop..."
  do_backup
  
  local watch_dirs
  watch_dirs=( $(build_watch_dirs) )
  
  if [[ ${#watch_dirs[@]} -eq 0 ]]; then
    log "ERROR" "No directories to watch. Exiting."
    exit 1
  fi
  
  log "INFO" "Watching directories: ${watch_dirs[*]}"
  
  while true; do
    log "INFO" "Waiting for changes in watched directories..."
    event=$(inotifywait -e close_write -e moved_to "${watch_dirs[@]}" 2>&1)
    ret=$?
    
    if [[ $ret -eq 0 ]]; then
      log "INFO" "Change detected: $event"
      do_backup
    else
      log "ERROR" "inotify error: ret=$ret, output: $event"
      sleep "${RETRY_WAIT:-5}"
      
      # Check if watch directories have changed
      local new_watch_dirs
      new_watch_dirs=( $(build_watch_dirs) )
      
      if [[ "${new_watch_dirs[*]}" != "${watch_dirs[*]}" ]]; then
        log "INFO" "Watch directories have changed, updating..."
        watch_dirs=("${new_watch_dirs[@]}")
        log "INFO" "New watch directories: ${watch_dirs[*]}"
      fi
    fi
  done
}

###############################################################################
# Update Functions
###############################################################################
check_for_updates() {
  log "INFO" "Checking for updates..."
  local remote_url="https://raw.githubusercontent.com/open-e/pve-config-backup/main/pve-config-backup"
  local temp_file
  temp_file=$(mktemp)
  
  if ! wget -q -O "$temp_file" "$remote_url"; then
    log "ERROR" "Failed to fetch remote version. Check network connectivity."
    rm -f "$temp_file"
    return 2
  fi
  
  local remote_version
  remote_version=$(grep '^VERSION=' "$temp_file" | head -1 | cut -d'"' -f2)
  rm -f "$temp_file"
  
  if [[ -z "$remote_version" ]]; then
    log "ERROR" "Could not parse remote version"
    return 2
  fi
  
  log "INFO" "Current version: $VERSION"
  log "INFO" "Remote version: $remote_version"
  
  if [[ "$VERSION" != "$remote_version" ]]; then
    log "INFO" "Update available: $VERSION -> $remote_version"
    return 0
  else
    log "INFO" "Already running latest version"
    return 1
  fi
}

update_script() {
  log "INFO" "Starting script update process..."
  local remote_url="https://raw.githubusercontent.com/open-e/pve-config-backup/main/pve-config-backup"
  local script_path="$0"
  local backup_path="${script_path}.backup.${VERSION}"
  local temp_path
  temp_path=$(mktemp)
  
  # Create backup of current version
  if ! cp "$script_path" "$backup_path"; then
    log "ERROR" "Failed to create backup at $backup_path"
    rm -f "$temp_path"
    return 1
  fi
  log "INFO" "Created backup: $backup_path"
  
  # Download new version
  log "INFO" "Downloading update from $remote_url"
  if ! wget -q -O "$temp_path" "$remote_url"; then
    log "ERROR" "Failed to download update"
    rm -f "$temp_path"
    return 1
  fi
  
  # Verify downloaded file
  if [[ ! -s "$temp_path" ]]; then
    log "ERROR" "Downloaded file is empty"
    rm -f "$temp_path"
    return 1
  fi
  
  # Install new version
  if ! cp "$temp_path" "$script_path"; then
    log "ERROR" "Failed to install update, restoring backup"
    cp "$backup_path" "$script_path"
    rm -f "$temp_path"
    return 1
  fi
  
  chmod +x "$script_path"
  rm -f "$temp_path"
  
  log "INFO" "Update completed successfully"
  return 0
}

perform_update() {
  check_for_updates
  local ret=$?
  
  if [[ $ret -eq 1 ]]; then
    echo "Already running the latest version ($VERSION)"
    return 0
  elif [[ $ret -eq 2 ]]; then
    echo "Failed to check for updates"
    return 1
  fi
  
  echo "Update available for $SCRIPT_NAME"
  echo "Current version: $VERSION"
  echo -n "Do you want to update? [y/N]: "
  read -r response
  
  if [[ "$response" =~ ^[Yy]$ ]]; then
    if update_script; then
      echo "Update completed successfully!"
      echo "Please restart any running services if needed."
      return 0
    else
      echo "Update failed. Check logs for details."
      return 1
    fi
  else
    echo "Update cancelled"
    return 1
  fi
}

###############################################################################
# Show Backup Info
###############################################################################
show_backup_info() {
  echo "Recent backup of conf files stored on NFS Storage:"
  
  # Use timeout to prevent hanging if the find command takes too long
  # Also add a check to make sure the directory exists before searching
  if [[ -d "/mnt/pve" ]]; then
    backup_list=$(timeout 5s find /mnt/pve/*/images/*/ -maxdepth 1 -name "*.conf" -type f -exec ls -la {} \; 2>/dev/null || echo "")
  else
    backup_list=""
    echo "[WARN] Directory /mnt/pve does not exist"
  fi
  
  if [[ -z "$backup_list" ]]; then
    echo "[INFO] No configuration backups have been completed so far."
  else
    echo "$backup_list"
  fi
  
  echo ""
  echo "Service status:"
  if systemctl is-active "${SERVICE_NAME}" &>/dev/null; then
    echo "[INFO] Service is running"
  else
    echo "[WARN] Service is not running"
  fi
  
  echo ""
  echo "Log file (last 10 entries):"
  if [[ -f "${LOG_FILE}" ]]; then
    tail -n 10 "${LOG_FILE}"
  else
    echo "[INFO] No log file found at ${LOG_FILE}"
  fi
}

###############################################################################
# Main Argument Parser
###############################################################################
main() {
  local args=("$@")
  if [[ ${#args[@]} -eq 0 ]]; then
    show_backup_info
    exit 0
  fi

  case "${args[0]}" in
    help|-h)
      usage
      ;;
    install)
      install_service
      ;;
    uninstall)
      uninstall_service
      ;;
    status)
      status_service
      ;;
    start)
      start_service
      ;;
    stop)
      stop_service
      ;;
    daemon)
      check_dependencies
      run_inotify_daemon
      ;;
    info)
      show_backup_info
      ;;
    config)
      create_default_config
      ;;
    version)
      echo "${SCRIPT_NAME} version ${VERSION} (${RELEASE_DATE})"
      ;;
    update)
      perform_update
      ;;
    *)
      usage
      exit 1
      ;;
  esac
}

main "$@"
